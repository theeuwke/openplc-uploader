[platformio]
core_dir = .core_dir

[env]
extra_scripts =
    pre:bin/script.py
build_flags =
    -I lib/matiec/lib/C
    -I src
    -I src/generated
framework = arduino
lib_archive = no

;;
;; Custom parameter definition
;;
;;   board_name:  displayed name on the uploader UI
;;   board_hw:    section name containing IO configuration 
;;   board_uart:  number of serial ports, default 1
;;

[env:uno]
board_hw = uno
board_name = Arduino Uno
platform = atmelavr
board = uno
build_flags =
    ${env.build_flags}
    -D BOARD_UNO

[env:uno_eth]
board_hw = uno_eth
board_name = Arduino Uno - W5500
platform = atmelavr
board = uno
lib_deps =
    arduino-libraries/Ethernet@^2.0.1
build_flags =
    ${env.build_flags}
    -D BOARD_UNO
    -D MODBUS_ETH

[env:micro]
board_hw = uno
board_name = Arduino Micro
board_uart = 2
platform = atmelavr
board = sparkfun_promicro16
build_flags =
    ${env.build_flags}
    -D BOARD_UNO

[env:mega]
board_hw = mega
board_name = Arduino Mega
board_uart = 4
platform = atmelavr
board = megaatmega2560
build_flags =
    ${env.build_flags}
    -D BOARD_MEGA_DUE

[env:mega_eth]
board_hw = mega_eth
board_name = Arduino Mega - W5500
board_uart = 4
platform = atmelavr
board = megaatmega2560
lib_deps =
    arduino-libraries/Ethernet@^2.0.1
build_flags =
    ${env.build_flags}
    -D BOARD_MEGA_DUE
    -D MODBUS_ETH

[env:dueUSB]
board_hw = mega
board_name = Arduino Due (native USB port)
board_uart = 4
platform = atmelsam
board = dueUSB
build_flags =
    ${env.build_flags}
    -D BOARD_MEGA_DUE

[env:due]
board_hw = mega
board_name = Arduino Due (programming port)
board_uart = 4
platform = atmelsam
board = due
build_flags =
    ${env.build_flags}
    -D BOARD_MEGA_DUE

[env:nano_every]
board_hw = nano
board_name = Nano Every
platform = atmelmegaavr
board = nano_every
build_flags =
    ${env.build_flags}
    -D BOARD_NANO

[env:nano_33_iot]
board_hw = nano
board_name = Nano 33 IoT
platform = atmelsam
board = nano_33_iot
lib_deps =
    arduino-libraries/WiFiNINA@^1.8.13
build_flags =
    ${env.build_flags}
    -D BOARD_NANO
    -D MODBUS_WIFI

;
; TODO: this fails to compile
;
; [env:nano33ble]
; board_hw = nano
; board_name = Nano 33 BLE
; platform = nordicnrf52
; board = nano33ble
; build_flags =
;     ${env.build_flags}
;     -D BOARD_NANO

[env:nodemcu]
board_hw = esp8266
board_name = ESP8266 NodeMCU
platform = espressif8266
board = nodemcuv2
build_flags =
    ${env.build_flags}
    -D BOARD_ESP8266
    -D MODBUS_WIFI

[env:d1_mini]
board_hw = esp8266
board_name = ESP8266 D1-mini
platform = espressif8266
board = nodemcuv2
build_flags =
    ${env.build_flags}
    -D BOARD_ESP8266
    -D MODBUS_WIFI

[env:esp32]
board_hw = esp32
board_name = ESP32
platform = espressif32
board = esp32dev
build_flags =
    ${env.build_flags}
    -D BOARD_ESP32
    -D MODBUS_WIFI

[env:esp32cam]
board_hw = esp32
board_name = ESP32-Cam
platform = espressif32
board = esp32cam
build_flags =
    ${env.build_flags}
    -D BOARD_ESP32_CAM
    -D MODBUS_WIFI

[env:mkr_zero]
board_hw = mkr
board_name = Mkr Zero
board_uart = 2
platform = atmelsam
board = mkrzero
build_flags =
    ${env.build_flags}
    -D BOARD_MKR

[env:mkr_wifi]
board_hw = mkr
board_name = Mkr WiFi
board_uart = 2
platform = atmelsam
board = mkrwifi1010
lib_deps =
    arduino-libraries/WiFiNINA@^1.8.13
build_flags =
    ${env.build_flags}
    -D BOARD_MKR
    -D MODBUS_WIFI

[env:seeed_xiao]
board_hw = xiao
platform = atmelsam
board_name = Seeed Studio XIAO SAMD21
board = seeed_xiao
build_flags =
    ${env.build_flags}
    -D BOARD_XIAO

[env:bluepill]
board_hw = stm32
board_name = STM32-F103CB (Bluepill)
platform = ststm32
board = bluepill_f103c8
board_build.core = maple
upload_protocol = dfu
upload_port = /dev/ttyACM0
build_flags =
    ${env.build_flags}
    -D BOARD_STM32
    -Wl,--verbose

;; This entry must come before any stm32 entries
[env:stm32_bootloader]
framework = libopencm3
platform = ststm32
board_build.ldscript = bootloader/stm32fx.ld
build_src_filter = -<*> +<../bootloader/bootloader.c>
board = genericSTM32F103C8
upload_protocol = serial
upload_speed = 57600
;;upload_protocol = stlink
;;upload_flags = -c set CPUTAPID 0
build_flags =
    -Os -std=gnu99
    -MD -Wall -Wundef
    -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd
    -Wextra -Wshadow -Wredundant-decls
    -fno-common -ffunction-sections -fdata-sections
    -Wl,--defsym=__boot_size__=0
    -Wl,--gc-sections
    -Wl,--print-memory-usage

[fx_common]
upload_protocol = serial
upload_speed = 57600
extra_scripts =
    bin/post_script.py
    pre:bin/script.py
    post:bin/upload.py
build_flags =
    ${env.build_flags}
    -D VECT_TAB_OFFSET=0x1000
    -D ENABLE_HWSERIAL1

[env:stm32]
extends = fx_common
board_hw = stm32
board_name = STM32-F103VE Generic
platform = ststm32
board_uart = 4
board = genericSTM32F103VE
build_flags =
    ${fx_common.build_flags}
    -D BOARD_STM32

[env:fx1n_20mr]
extends = fx_common
board_hw = fx1n_20mr
board_name = FX1N-20 PLC (STM32)
platform = ststm32
board = genericSTM32F103RC
build_flags =
    ${fx_common.build_flags}
    -D ENABLE_HWSERIAL1
    -D BOARD_FX1N_20

[env:fx3u_14]
extends = fx_common
board_hw = fx3u_14
board_name = FX3U-14 PLC (STM32)
platform = ststm32
board = genericSTM32F103VC
build_flags =
    ${fx_common.build_flags}
    -D ENABLE_HWSERIAL3
    -D BOARD_FX3U_14

[env:fx3u_24]
extends = fx_common
board_hw = fx3u_24
board_name = FX3U-24 PLC (STM32)
platform = ststm32
board = genericSTM32F103VC
build_flags =
    ${fx_common.build_flags}
    -D ENABLE_HWSERIAL3
    -D BOARD_FX3U_24

[env:fx3u_26_e]
extends = fx_common
board_hw = fx3u_26_e
board_name = FX3U-26 PLC with Ethernet (STM32)
platform = ststm32
board = genericSTM32F103VC
lib_deps =
    arduino-libraries/Ethernet@^2.0.1
build_flags =
    ${fx_common.build_flags}
    -D ENABLE_HWSERIAL4
    -D BOARD_FX3U_26_E

;:
;; the following are the default hardware I/O configurations
;:
;;      din:  pin mapping for the digital inputs  (%IX0.0 ...)
;;      dout: pin mapping for the digital outputs (%QX0.0 ...)
;;      ain:  pin mapping for the analog inputs   (%IW0 ...)
;;      aout: pin mapping for the analog outputs  (%QW0 ...)
;;

[uno]
din  = 2, 3, 4, 5, 6
dout = 7, 8, 12, 13
ain  = A0, A1, A2, A3, A4, A5
aout = 9, 10, 11

[uno_eth]
din  = 2, 3, 4, 5, 6
dout = 7, 8
ain  = A0, A1, A2, A3, A4, A5
aout = 9

[mega]
din  = 62, 63, 64, 65, 66, 67, 68, 69, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52
dout = 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53
ain  = A0, A1, A2, A3, A4, A5, A6, A7
aout = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13

[mega_eth]
din  = 62, 63, 64, 65, 66, 67, 68, 69, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48
dout = 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49
ain  = A0, A1, A2, A3, A4, A5, A6, A7
aout = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13

[nano]
din  = 2, 3, 4, 5, 6
dout = 7, 8, 10, 11, 12, 13
ain  = 15, 16, 17, 18, 19, 20, 21
aout = 9, 14

[esp32]
din  = 17, 18, 19, 21, 22, 23, 27, 32, 33
dout = 1, 2, 3, 4, 5, 12, 13, 14, 15, 16
ain  = 34, 35, 36, 39
aout = 25, 26

[mkr]
din  = 0, 1, 2, 3, 4, 5
dout = 7, 8, 9, 10, 11, 12
ain  = A1, A2, A3, A4, A5, A6
aout = 6, 15

[esp8266]
din  = 2, 14, 12, 13
dout = 16, 5, 4, 0
ain  = A0
aout = 15

[xiao]
din  = 7, 8, 9, 10
dout = 3, 4, 5, 6, 13
ain  = A1, A2
aout = A0

[stm32]
din  = PA8, PA11, PA12, PB3, PB4, PB5, PB8, PB9, PB10
dout = PB11, PB12, PB13, PB14, PB15, PC14, PC15
ain  = PA0, PA1, PA4, PA5, PA6, PA7
aout = PB0, PB1
led  = PC13
uarts = UART1, UART2

[fx1n_20]
no_wifi = 1
no_eth = 1
led  = PA12
uarts = UART1, UART2
discrete_count = 16
coil_count = 16
input_count = 8
holding_count = 8

[fx3u_14]
no_wifi = 1
no_eth = 1
led  = PD10
uarts = UART1, UART2
discrete_count = 16
coil_count = 16
input_count = 8
holding_count = 8

[fx3u_24]
no_wifi = 1
no_eth = 1
led  = PD10
uarts = UART1, UART2
discrete_count = 16
coil_count = 16
input_count = 8
holding_count = 8

[fx3u_26_e]
no_wifi = 1
led  = PE0, PE1
uarts = UART1, UART2
discrete_count = 16
coil_count = 16
input_count = 8
holding_count = 8
